{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","log","cats","onChange","target","value","type","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAqB5C,OACI,uBAAMC,SAbW,SAACC,GAGlBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAExBC,QAAQC,IAAIR,GACZF,GAAc,SAAAW,GAAS,MAAM,CAAET,GAAR,mBAAsBS,OAC7CR,EAAc,MAKlB,UACA,uBAAOS,SAnBe,SAACP,GACvBF,EAAcE,EAAEQ,OAAOC,QAmBhBC,KAAK,SAGZ,6BAAKb,Q,+BC7BAc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAYZM,GAZY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACA,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHCO,EAAU,SAAC,GAAgB,IAAD,ECAX,SAACnB,GAAc,IAAD,EAEZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAetC,OARAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAhB,GAAI,OAAIc,EAAS,CACnBf,KAAMC,EACNY,SAAS,SAEd,CAACpB,IAEGqB,EDb6BI,CAFD,EAAdzB,UAEHa,EAFiB,EAExBN,KAAca,EAFU,EAEVA,QAEzB,OACI,qCACCA,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACSH,EAAOJ,KAAK,SAACC,GACV,OAAQ,cAAC,EAAD,eAEAA,GADCA,EAAIC,aETpBe,EAAS,WAAO,IAAD,EAEY1C,mBAAS,IAFrB,mBAEjB2C,EAFiB,KAEL5C,EAFK,KAIxB,OACI,qCACI,wCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEQ4C,EAAWlB,KAAK,SAACT,GACb,OAAO,cAAC,EAAD,CAASA,SAAUA,WCTlD4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8ace1bfe.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    //Manejamos el input\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //Manejamos el enter\r\n    const handleSubmit = (e) => {\r\n        //console.log('Submit!');\r\n        //Evitamos que se recargue todo el sitio\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2)\r\n        {\r\n            console.log(inputValue)\r\n            setCategories(cats => {return [inputValue,...cats]});\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <input onChange={handleInputChange}\r\n               type=\"text\"\r\n                \r\n        />\r\n        <h2>{inputValue}</h2>\r\n        </form>\r\n    )\r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZRdIUxtyKlKdP3KqQKCplo5bn7PBtBbB`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n        <img src={url} alt={title}/>\r\n        <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\nexport const GifGrid = ({category}) => {\r\n\r\n        const {data : images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        {loading && <p>Loading...</p>}\r\n        <div className=\"card-grid\">\r\n                {images.map( (img) => {\r\n                    return (<GifGridItem\r\n                        key={img.id} \r\n                        {...img}\r\n                         />);\r\n                })}\r\n        </div>\r\n        </>\r\n    )\r\n}","import {useState,useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(gifs => setState({\r\n            data: gifs,\r\n            loading: false\r\n        }));\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}\r\n\r\n","import React, { Fragment, useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return(\r\n        <>\r\n            <h2>GifApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n                {\r\n                    categories.map( (category) => {\r\n                        return <GifGrid category={category}/>\r\n                    })\r\n                }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './GifApp';\nimport { GifApp } from './GifApp';\n\nReactDOM.render(\n    <GifApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n\n\n"],"sourceRoot":""}